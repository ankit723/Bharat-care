generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  DOCTOR
  PATIENT
  HOSPITAL
  CLINIC
  MEDSTORE
  CHECKUP_CENTER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  PRESCRIPTION
  MEDICAL_REPORT
}

enum Specialization {
  CARDIOLOGY
  PEDIATRICS
  GYNECOLOGY
  ORTHOPEDICS
  SURGERY
  DERMATOLOGY
  NEUROLOGY
  ONCOLOGY
  ENDOCRINOLOGY
  GASTROENTEROLOGY
  HEMATOLOGY
  INFECTIOUS_DISEASES
}

enum TransactionType {
  REFERRAL_REWARD
  MEDICINE_COMPLIANCE
  ADMIN_ADJUSTMENT
  OTHER
}

model Doctor {
  id            String   @id @default(uuid())
  userId        String   @unique
  role          String   @default("doctor")
  name          String 
  specialization Specialization @default(CARDIOLOGY)
  phone         String
  addressLine   String
  city          String
  state         String
  pin           String
  country       String
  email         String   @unique
  password      String
  verificationStatus VerificationStatus @default(PENDING)
  rewardPoints  Int      @default(0)
  clinicId      String?  @unique
  clinic        Clinic?  @relation(fields: [clinicId], references: [id])

  hospitals      Hospital[]

  medDocuments MedDocument[] @relation("DoctorMedDocuments")

  doctorNextVisit doctorNextVisit[]

  reviews Review[]

  patients Patient[]

  // Referral relationships
  referralsGiven     Referral[] @relation("ReferrerDoctor")
  referralsReceived  Referral[] @relation("ReferredDoctor")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("DoctorRewardTransactions")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Clinic {
  id            String   @id @default(uuid())
  userId        String   @unique
  role          String   @default("clinic")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state         String
  pin           String
  country       String
  verificationStatus VerificationStatus @default(PENDING)
  rewardPoints  Int      @default(0)
  doctor        Doctor?  @relation

  // Referral relationships
  referralsGiven     Referral[] @relation("ReferrerClinic")
  referralsReceived  Referral[] @relation("ReferredClinic")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("ClinicRewardTransactions")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MedStore {
  id            String   @id @default(uuid())
  userId        String   @unique
  role          String   @default("medStore")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine String
  city String
  state String
  pin String
  country String
  verificationStatus VerificationStatus @default(PENDING)
  rewardPoints  Int      @default(0)

  raisedHands   MedStoreHandRaise[]

  // Referral relationships
  referralsGiven     Referral[] @relation("ReferrerMedStore")
  referralsReceived  Referral[] @relation("ReferredMedStore")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("MedStoreRewardTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hospital {
  id            String   @id @default(uuid())
  userId        String   @unique
  role          String   @default("hospital")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state String
  pin String
  country String
  verificationStatus VerificationStatus @default(PENDING)
  rewardPoints  Int      @default(0)

  doctor Doctor[]

  reviews Review[]

  patients Patient[]

  // Referral relationships
  referralsGiven     Referral[] @relation("ReferrerHospital")
  referralsReceived  Referral[] @relation("ReferredHospital")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("HospitalRewardTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CheckupCenter {
  id            String   @id @default(uuid())
  userId        String   @unique
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state         String
  pin           String
  country       String
  verificationStatus VerificationStatus @default(PENDING)
  role          String   @default("checkup_center")
  rewardPoints  Int      @default(0)

  patients      Patient[]     @relation("CheckupCenterPatients")
  medDocuments  MedDocument[] @relation("CheckupCenterMedDocuments")

  checkupCenterNextVisit checkupCenterNextVisit[]

  reviews Review[]

  // Referral relationships
  referralsGiven     Referral[] @relation("ReferrerCheckupCenter")
  referralsReceived  Referral[] @relation("ReferredCheckupCenter")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("CheckupCenterRewardTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedDocument {
  id            String   @id @default(uuid())
  fileName      String
  fileUrl       String
  documentType  DocumentType
  seekAvailability Boolean @default(false)

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  uploadedById  String 
  uploaderType  Role

  permittedDoctorIds        String[] @default([])
  permittedCheckupCenterIds String[] @default([])
  
  description   String?

  doctorId        String?
  doctor          Doctor?  @relation("DoctorMedDocuments", fields: [doctorId], references: [id])
  
  checkupCenterId String?
  checkupCenter   CheckupCenter? @relation("CheckupCenterMedDocuments", fields: [checkupCenterId], references: [id])
  
  patientUploaderId String?
  patientUploader   Patient?       @relation("PatientUploadedMedDocuments", fields: [patientUploaderId], references: [id])

  medStoreHandRaises MedStoreHandRaise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model doctorNextVisit {
  id String @id @default(uuid())
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  nextVisit DateTime
}

model checkupCenterNextVisit {
  id String @id @default(uuid())
  checkupCenterId String
  checkupCenter CheckupCenter @relation(fields: [checkupCenterId], references: [id])
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  nextVisit DateTime
}

model MedStoreHandRaise {
  id String @id @default(uuid())
  medDocumentId String
  medDocument MedDocument @relation(fields: [medDocumentId], references: [id], onDelete: Cascade)
  medStoreId String
  medStore MedStore @relation(fields: [medStoreId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  status    String   @default("ACTIVE")

  @@unique([medDocumentId, medStoreId])
}

model MedicineSchedule {
  id              String   @id @default(uuid())
  patientId       String
  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  schedulerId     String   // ID of the Doctor or MedStore who created this schedule
  schedulerType   Role     // DOCTOR or MEDSTORE (using the existing Role enum)
  
  startDate       DateTime
  numberOfDays    Int      // Total duration for the entire set of medicines
  notes           String?  // Optional overall notes for the schedule

  items           ScheduledMedicineItem[] // Relation to individual medicine items

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([patientId])
  @@index([schedulerId, schedulerType])
}

model ScheduledMedicineItem {
  id                  String    @id @default(uuid())
  medicineScheduleId  String
  medicineSchedule    MedicineSchedule @relation(fields: [medicineScheduleId], references: [id], onDelete: Cascade)

  medicineName        String
  dosage              String    // e.g., "1 tablet", "5ml", "1 puff"
  timesPerDay         Int       // e.g., 1, 2, 3 for this specific medicine
  gapBetweenDays      Int       // 0 for daily, 1 for every other day, etc., for this specific medicine
  notes               String?   // Optional special instructions for this medicine

  // New relation to reminder times
  reminderTimes       MedicineReminderTime[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([medicineScheduleId])
}

model MedicineReminderTime {
  id                    String    @id @default(uuid())
  
  medicineItemId        String
  medicineItem          ScheduledMedicineItem @relation(fields: [medicineItemId], references: [id], onDelete: Cascade)
  
  patientId             String
  patient               Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  reminderTime          String    // Time in HH:MM format (e.g., "08:30", "14:00", "20:15")
  isActive              Boolean   @default(true)
  
  // Tracking fields
  lastTakenAt           DateTime?
  consecutiveDaysTaken  Int       @default(0)
  totalTimesTaken       Int       @default(0)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([medicineItemId])
  @@index([patientId])
  @@index([patientId, isActive])
}

model Patient {
  id            String   @id @default(uuid())
  userId        String   @unique
  role          String   @default("patient")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state String
  pin String
  country String
  rewardPoints  Int      @default(0)

  doctors Doctor[]

  checkupCenters CheckupCenter[] @relation("CheckupCenterPatients")
  
  uploadedMedDocuments MedDocument[] @relation("PatientUploadedMedDocuments")
  associatedMedDocuments MedDocument[]

  hospitals Hospital[]
  reviews Review[]

  doctorNextVisit doctorNextVisit[]

  checkupCenterNextVisit checkupCenterNextVisit[]

  medicineSchedules    MedicineSchedule[] // Relation to medicine schedules
  
  // New relation to medicine reminder times
  medicineReminderTimes MedicineReminderTime[]

  // Referral relationships
  referralsGiven     Referral[] @relation("ReferrerPatient")
  referralsReceived  Referral[] @relation("ReferredPatient")
  serviceReferrals   Referral[] @relation("ServiceReferralPatient")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("PatientRewardTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?

  hospitalId String?
  hospital Hospital? @relation(fields: [hospitalId], references: [id])

  doctorId String?
  doctor Doctor? @relation(fields: [doctorId], references: [id])

  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id])

  checkupCenterId String?
  checkupCenter CheckupCenter? @relation(fields: [checkupCenterId], references: [id])

  createdAt DateTime @default(now())
}

model Admin {
  id            String   @id @default(uuid())
  userId        String   @unique
  role          String   @default("admin")
  name          String
  email         String   @unique
  phone         String
  addressLine   String
  city          String
  state String
  pin String
  country String
  password      String
  rewardPoints  Int      @default(0)
  
  // System settings managed by admin
  rewardSettings RewardSetting[]
  
  // Referrals given by admin
  referralsGiven Referral[] @relation("ReferrerAdmin")
  
  // Reward transaction relationship
  rewardTransactions RewardTransaction[] @relation("AdminRewardTransactions")
}

// New model for tracking referrals
model Referral {
  id              String   @id @default(uuid())
  
  // Who referred - polymorphic relationship
  referrerId      String
  referrerRole    Role
  
  // Doctor referrer
  referrerDoctorId String?
  referrerDoctor  Doctor?  @relation("ReferrerDoctor", fields: [referrerDoctorId], references: [id])
  
  // Patient referrer
  referrerPatientId String?
  referrerPatient  Patient? @relation("ReferrerPatient", fields: [referrerPatientId], references: [id])
  
  // Hospital referrer
  referrerHospitalId String?
  referrerHospital  Hospital? @relation("ReferrerHospital", fields: [referrerHospitalId], references: [id])
  
  // MedStore referrer
  referrerMedStoreId String?
  referrerMedStore  MedStore? @relation("ReferrerMedStore", fields: [referrerMedStoreId], references: [id])
  
  // Clinic referrer
  referrerClinicId String?
  referrerClinic   Clinic? @relation("ReferrerClinic", fields: [referrerClinicId], references: [id])
  
  // CheckupCenter referrer
  referrerCheckupCenterId String?
  referrerCheckupCenter  CheckupCenter? @relation("ReferrerCheckupCenter", fields: [referrerCheckupCenterId], references: [id])
  
  // Admin referrer
  referrerAdminId String?
  referrerAdmin   Admin? @relation("ReferrerAdmin", fields: [referrerAdminId], references: [id])
  
  // Who was referred - polymorphic relationship
  referredId      String
  referredRole    Role
  
  // Doctor referred
  referredDoctorId String?
  referredDoctor  Doctor? @relation("ReferredDoctor", fields: [referredDoctorId], references: [id])
  
  // Patient referred
  referredPatientId String?
  referredPatient  Patient? @relation("ReferredPatient", fields: [referredPatientId], references: [id])
  
  // Hospital referred
  referredHospitalId String?
  referredHospital  Hospital? @relation("ReferredHospital", fields: [referredHospitalId], references: [id])
  
  // MedStore referred
  referredMedStoreId String?
  referredMedStore  MedStore? @relation("ReferredMedStore", fields: [referredMedStoreId], references: [id])
  
  // Clinic referred
  referredClinicId String?
  referredClinic   Clinic? @relation("ReferredClinic", fields: [referredClinicId], references: [id])
  
  // CheckupCenter referred
  referredCheckupCenterId String?
  referredCheckupCenter  CheckupCenter? @relation("ReferredCheckupCenter", fields: [referredCheckupCenterId], references: [id])
  
  pointsAwarded    Int
  status           String   @default("PENDING") // PENDING, COMPLETED, REJECTED
  completedAt      DateTime?
  
  // Service referral fields
  patientId        String?
  patientDetails   Patient? @relation("ServiceReferralPatient", fields: [patientId], references: [id])
  serviceType      String?  // DOCTOR_CONSULT, MEDSTORE_PURCHASE, CHECKUP_SERVICE
  notes            String?
  isServiceReferral Boolean @default(false)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([referrerId, referrerRole])
  @@index([referredId, referredRole])
  @@index([patientId])
  @@index([isServiceReferral])
}

// Model for tracking reward transactions
model RewardTransaction {
  id              String   @id @default(uuid())
  
  // Who received points - polymorphic relationship
  userId          String
  userRole        Role
  
  // Specific entity relationships
  doctorId        String?
  doctor          Doctor?  @relation("DoctorRewardTransactions", fields: [doctorId], references: [id])
  
  patientId       String?
  patient         Patient? @relation("PatientRewardTransactions", fields: [patientId], references: [id])
  
  hospitalId      String?
  hospital        Hospital? @relation("HospitalRewardTransactions", fields: [hospitalId], references: [id])
  
  medStoreId      String?
  medStore        MedStore? @relation("MedStoreRewardTransactions", fields: [medStoreId], references: [id])
  
  clinicId        String?
  clinic          Clinic? @relation("ClinicRewardTransactions", fields: [clinicId], references: [id])
  
  checkupCenterId String?
  checkupCenter   CheckupCenter? @relation("CheckupCenterRewardTransactions", fields: [checkupCenterId], references: [id])
  
  adminId         String?
  admin           Admin? @relation("AdminRewardTransactions", fields: [adminId], references: [id])
  
  points          Int
  transactionType TransactionType
  description     String
  referralId      String?
  
  createdAt       DateTime @default(now())
  
  @@index([userId, userRole])
}

// Model for storing reward settings
model RewardSetting {
  id              String   @id @default(uuid())
  key             String   @unique // e.g., "referral_points"
  value           Int
  description     String
  
  updatedById     String
  updatedBy       Admin    @relation(fields: [updatedById], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}