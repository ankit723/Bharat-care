generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  DOCTOR
  PATIENT
  HOSPITAL
  CLINIC
  MEDSTORE
  CHECKUP_CENTER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  PRESCRIPTION
  MEDICAL_REPORT
}

enum Specialization {
  CARDIOLOGY
  PEDIATRICS
  GYNECOLOGY
  ORTHOPEDICS
  SURGERY
  DERMATOLOGY
  NEUROLOGY
  ONCOLOGY
  ENDOCRINOLOGY
  GASTROENTEROLOGY
  HEMATOLOGY
  INFECTIOUS_DISEASES
}

model Doctor {
  id            String   @id @default(uuid())
  role          String   @default("doctor")
  name          String 
  specialization Specialization @default(CARDIOLOGY)
  phone         String
  addressLine   String
  city          String
  state         String
  pin           String
  country       String
  email         String   @unique
  password      String
  verificationStatus VerificationStatus @default(PENDING)
  clinicId      String?  @unique
  clinic        Clinic?  @relation(fields: [clinicId], references: [id])

  hospitals      Hospital[]

  medDocuments MedDocument[] @relation("DoctorMedDocuments")

  doctorNextVisit doctorNextVisit[]

  reviews Review[]

  patients Patient[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Clinic {
  id            String   @id @default(uuid())
  role          String   @default("clinic")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state         String
  pin           String
  country       String
  verificationStatus VerificationStatus @default(PENDING)
  doctor        Doctor?  @relation

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MedStore {
  id            String   @id @default(uuid())
  role          String   @default("medStore")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine String
  city String
  state String
  pin String
  country String
  verificationStatus VerificationStatus @default(PENDING)

  raisedHands   MedStoreHandRaise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hospital {
  id            String   @id @default(uuid())
  role          String   @default("hospital")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state String
  pin String
  country String
  verificationStatus VerificationStatus @default(PENDING)

  doctor Doctor[]

  reviews Review[]

  patients Patient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CheckupCenter {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state         String
  pin           String
  country       String
  verificationStatus VerificationStatus @default(PENDING)
  role          String   @default("checkup_center")

  patients      Patient[]     @relation("CheckupCenterPatients")
  medDocuments  MedDocument[] @relation("CheckupCenterMedDocuments")

  checkupCenterNextVisit checkupCenterNextVisit[]

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedDocument {
  id            String   @id @default(uuid())
  fileName      String
  fileUrl       String
  documentType  DocumentType
  seekAvailability Boolean @default(false)

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  uploadedById  String 
  uploaderType  Role

  permittedDoctorIds        String[] @default([])
  permittedCheckupCenterIds String[] @default([])
  
  description   String?

  doctorId        String?
  doctor          Doctor?  @relation("DoctorMedDocuments", fields: [doctorId], references: [id])
  
  checkupCenterId String?
  checkupCenter   CheckupCenter? @relation("CheckupCenterMedDocuments", fields: [checkupCenterId], references: [id])
  
  patientUploaderId String?
  patientUploader   Patient?       @relation("PatientUploadedMedDocuments", fields: [patientUploaderId], references: [id])

  medStoreHandRaises MedStoreHandRaise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model doctorNextVisit {
  id String @id @default(uuid())
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  nextVisit DateTime
}

model checkupCenterNextVisit {
  id String @id @default(uuid())
  checkupCenterId String
  checkupCenter CheckupCenter @relation(fields: [checkupCenterId], references: [id])
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  nextVisit DateTime
}

model MedStoreHandRaise {
  id String @id @default(uuid())
  medDocumentId String
  medDocument MedDocument @relation(fields: [medDocumentId], references: [id], onDelete: Cascade)
  medStoreId String
  medStore MedStore @relation(fields: [medStoreId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  status    String   @default("ACTIVE")

  @@unique([medDocumentId, medStoreId])
}

model MedicineSchedule {
  id              String   @id @default(uuid())
  patientId       String
  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  schedulerId     String   // ID of the Doctor or MedStore who created this schedule
  schedulerType   Role     // DOCTOR or MEDSTORE (using the existing Role enum)
  
  startDate       DateTime
  numberOfDays    Int      // Total duration for the entire set of medicines
  notes           String?  // Optional overall notes for the schedule

  items           ScheduledMedicineItem[] // Relation to individual medicine items

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([patientId])
  @@index([schedulerId, schedulerType])
}

model ScheduledMedicineItem {
  id                  String    @id @default(uuid())
  medicineScheduleId  String
  medicineSchedule    MedicineSchedule @relation(fields: [medicineScheduleId], references: [id], onDelete: Cascade)

  medicineName        String
  dosage              String    // e.g., "1 tablet", "5ml", "1 puff"
  timesPerDay         Int       // e.g., 1, 2, 3 for this specific medicine
  gapBetweenDays      Int       // 0 for daily, 1 for every other day, etc., for this specific medicine
  notes               String?   // Optional special instructions for this medicine

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([medicineScheduleId])
}

model Patient {
  id            String   @id @default(uuid())
  role          String   @default("patient")
  name          String
  email         String   @unique
  password      String
  phone         String
  addressLine   String
  city          String
  state String
  pin String
  country String

  doctors Doctor[]

  checkupCenters CheckupCenter[] @relation("CheckupCenterPatients")
  
  uploadedMedDocuments MedDocument[] @relation("PatientUploadedMedDocuments")
  associatedMedDocuments MedDocument[]

  hospitals Hospital[]
  reviews Review[]

  doctorNextVisit doctorNextVisit[]

  checkupCenterNextVisit checkupCenterNextVisit[]

  medicineSchedules    MedicineSchedule[] // Relation to medicine schedules

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?

  hospitalId String?
  hospital Hospital? @relation(fields: [hospitalId], references: [id])

  doctorId String?
  doctor Doctor? @relation(fields: [doctorId], references: [id])

  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id])

  checkupCenterId String?
  checkupCenter CheckupCenter? @relation(fields: [checkupCenterId], references: [id])

  createdAt DateTime @default(now())
}

model Admin {
  id            String   @id @default(uuid())
  role          String   @default("admin")
  name          String
  email         String   @unique
  phone         String
  addressLine   String
  city          String
  state String
  pin String
  country String
  password      String
}